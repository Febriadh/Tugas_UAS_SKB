# -*- coding: utf-8 -*-
"""Another copy of UAS_SKB_Prediksi Stroke Menggunakan Algoritma KNN

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ByftcawG3zCP9lrJ-4pX0jlm5wXzzjhg

## UAS SISTEM KECERDASAN BISNIS - A
# **Prediksi Stroke Menggunakan Algoritma KNN**

1. Roja' Putri Cintani - 4520210046
2. Febrianti Adhania - 4520210093
3. Zulfa Aenaeni - 4520210015
4. Syahrani Adrianty - 4520210034
5. Adila Apriliani - 4520210067

# **Import Library**
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from imblearn.over_sampling import SMOTE
import warnings
warnings.filterwarnings("ignore")

"""# **Import Data**"""

# mount Google Drive

from google.colab import drive
drive.mount ('/content/gdrive')

dataset = pd.read_csv("/content/healthcare-dataset-stroke-data.csv")

"""# **Menampilkan Dataframe**"""

dataset

"""# **Info Data**"""

dataset.info()

"""# **Dimension of the data**"""

print("dimension  of the data: {}".format(dataset.shape))

"""# **Cleaning Data**"""

dataset.drop(columns='id',inplace=True)
dataset.drop(columns='work_type',inplace=True)
dataset.drop(columns='Residence_type',inplace=True)

#cek missing value
dataset.isnull().sum()

#cek duplikat
dataset.duplicated().sum()

dataset['gender'].unique()

dataset['bmi'].unique()

#Replacing zero values with NaN and Replacing NaN with mean values
nonzero=['bmi']

for col in nonzero:
    dataset[col]=dataset[col].replace(0,np.NaN)
    mean=int(dataset[col].mean(skipna=True))
    dataset[col]=dataset[col].replace(np.NaN,mean)

dataset[dataset.gender == 'Other']

dataset.drop(index=[3116], inplace=True)

dataset

dataset.info()

"""# **Describing Data**"""

dataset.describe().T

"""# **Exploratory Data Analysis (EDA)**"""

fig, ax = plt.subplots(figsize = (6, 6))

index = dataset.stroke.value_counts().sort_values(ascending = False).index
ax = sns.countplot(data = dataset, x = 'stroke', order = index)
ax.set_title('Jumlah Pasien yang menderita stroke dan yang tidak menderita stroke', fontsize = 10)
ax.set_ylabel('')
ax.set_xticklabels(index, fontsize = 10)
ax.set_yticklabels(ax.get_yticks(), fontsize = 10)
#pemberian label text tiap bar chart
for p in ax.patches:
      ax.annotate(format(p.get_height(), '.1f'),
                    (p.get_x() + p.get_width() / 2., p.get_height()),
                    ha = 'center', va = 'center',
                    xytext = (0, 9),
                    textcoords = 'offset points', fontsize = 7)
plt.show()

"""Jumlah pasien yang tidak menderita stroke lebih banyak sebesar 4860 orang dibandingkan dengan jumlah pasien yang menderita stroke sebesar 249 orang."""

fig, ax = plt.subplots(figsize = (6, 6))

index = dataset.gender.value_counts().sort_values(ascending = False).index
ax = sns.countplot(x=dataset['gender'], hue=dataset['stroke'], data=pd.melt(dataset))
ax.set_title('Hubungan Antara Jenis Kelamin dengan Status Penyakit Stroke nya', fontsize = 10)
ax.set_ylabel('')
ax.set_xticklabels(index, fontsize = 10)
ax.set_yticklabels(ax.get_yticks(), fontsize = 10)
#pemberian label text tiap bar chart
for p in ax.patches:
      ax.annotate(format(p.get_height(), '.1f'),
                    (p.get_x() + p.get_width() / 2., p.get_height()),
                    ha = 'center', va = 'center',
                    xytext = (0, 9),
                    textcoords = 'offset points', fontsize = 7)
plt.show()

"""* Jumlah pasien berjenis kelamin laki-laki yang tidak menderita stroke lebih banyak sebesar 2853 orang dibandingkan jumlah pasien menderita stroke sebesar 141 orang.
* Jumlah pasien berjenis kelamin perempuan yang tidak menderita stroke lebih banyak sebesar 2007 orang dibandingkan jumlah pasien menderita stroke sebesar 108 orang.
* Jumlah pasien laki-laki lebih banyak dibandingkan dengan jumlah pasien perempuan berdasarkan data diatas.
* Variabel Gender saja tidak cukup untuk memprediksi kemungkinan terkena stroke.

- Male (0)
- Female (1)
"""

fig, ax = plt.subplots(figsize = (6, 6))

index = dataset.hypertension.value_counts().sort_values(ascending = False).index
ax = sns.countplot(x=dataset['hypertension'], hue=dataset['stroke'], data=pd.melt(dataset))
ax.set_title('Hubungan Antara Jumlah Status Hipertensi dengan Status Penyakit Stroke nya', fontsize = 10)
ax.set_ylabel('')
ax.set_xticklabels(index, fontsize = 10)
ax.set_yticklabels(ax.get_yticks(), fontsize = 10)
#pemberian label text tiap bar chart
for p in ax.patches:
      ax.annotate(format(p.get_height(), '.1f'),
                    (p.get_x() + p.get_width() / 2., p.get_height()),
                    ha = 'center', va = 'center',
                    xytext = (0, 9),
                    textcoords = 'offset points', fontsize = 7)
plt.show()

"""- Jumlah orang yang tidak mengalami hipertensi dan berpotensi menderita stroke sebesar 183 orang lebih banyak dibandingkan dengan jumlah orang mengalami hipertensi dan berpotensi stroke sebesar 66 orang.
- Jumlah orang yang tidak mengalami hipertensi dan tidak menderita stroke sebesar 4428 orang lebih banyak dibandingkan dengan jumlah orang yang mengalami hipertensi dan tidak menderita stroke sebesar 432 orang.
- Status hipertensi bukan merupakan faktor yang signifikan dalam memprediksi kemungkinan terjadinya stroke.
"""

fig, ax = plt.subplots(figsize = (6, 6))

index = dataset.heart_disease.value_counts().sort_values(ascending = False).index
ax = sns.countplot(x=dataset['heart_disease'], hue=dataset['stroke'], data=pd.melt(dataset))
ax.set_title('Hubungan Antara Penyakit Jantung dengan Status Penyakit Stroke nya', fontsize = 10)
ax.set_ylabel('')
ax.set_xticklabels(index, fontsize = 10)
ax.set_yticklabels(ax.get_yticks(), fontsize = 10)
#pemberian label text tiap bar chart
for p in ax.patches:
      ax.annotate(format(p.get_height(), '.1f'),
                    (p.get_x() + p.get_width() / 2., p.get_height()),
                    ha = 'center', va = 'center',
                    xytext = (0, 9),
                    textcoords = 'offset points', fontsize = 7)
plt.show()

"""- Jumlah pasien yang menderita penyakit jantung dan menderita stroke terbilang rendah berjumlah 47 orang, jika dibandingkan dengan pasien yang tidak menderita penyakit jantung dan menderita stroke berjumlah 202 orang.
- Status heart_disease bukan merupakan faktor yang signifikan dalam memprediksi kemungkinan terjadinya stroke.
"""

fig, ax = plt.subplots(figsize = (6, 6))

index = dataset.ever_married.value_counts().sort_values(ascending = False).index
ax = sns.countplot(x=dataset['ever_married'], hue=dataset['stroke'], data=pd.melt(dataset))
ax.set_title('Hubungan Antara Status Menikah dengan Status Penyakit Stroke nya', fontsize = 10)
ax.set_ylabel('')
ax.set_xticklabels(index, fontsize = 10)
ax.set_yticklabels(ax.get_yticks(), fontsize = 10)
#pemberian label text tiap bar chart
for p in ax.patches:
      ax.annotate(format(p.get_height(), '.1f'),
                    (p.get_x() + p.get_width() / 2., p.get_height()),
                    ha = 'center', va = 'center',
                    xytext = (0, 9),
                    textcoords = 'offset points', fontsize = 7)
plt.show()

"""* Sebagian besar pasien yang sudah menikah dan mengalami stroke berjumlah 220 orang lebih banyak dibandingkan dengan jumlah pasien yang belum menikah tetapi menderita stroke berjumlah 29 orang.
* Status perkawinan saja bukan merupakan faktor yang signifikan dalam memprediksi kemungkinan terjadinya stroke.

"""

fig, ax = plt.subplots(figsize = (6, 6))

index = dataset.smoking_status.value_counts().sort_values(ascending = False).index
ax = sns.countplot(x=dataset['smoking_status'], hue=dataset['stroke'], data=pd.melt(dataset))
ax.set_title('Hubungan Antara Status Merokok Pasien dengan Status Penyakit Stroke nya', fontsize = 10)
ax.set_ylabel('')
ax.set_xticklabels(index, fontsize = 10)
ax.set_yticklabels(ax.get_yticks(), fontsize = 10)
#pemberian label text tiap bar chart
for p in ax.patches:
      ax.annotate(format(p.get_height(), '.1f'),
                    (p.get_x() + p.get_width() / 2., p.get_height()),
                    ha = 'center', va = 'center',
                    xytext = (0, 9),
                    textcoords = 'offset points', fontsize = 7)
plt.show()

"""
- Sebagian besar orang yang tidak pernah merokok dapat mengalami stroke berjumlah 70 orang
- Orang yang merokok dan mengalami stroke dengan jumlah orang yang sedikit berjumlah 47 orang
- Orang yang sebelumnya merokok dan mengalami stroke berjumlah 42 orang
- Orang yang tidak diketahui status merokoknya dan mengalami stroke lebih banyak berjumlah 90 orang


  - Label :
- smokes (0)
- never smoked (1)
- unknown (2)
- formerly smoked (3)





"""

foo = dataset.explode('age')
foo['age'] = foo['age'].astype('float')
sns.violinplot(data=foo, x='stroke', y='age')

"""Pengamatan:

Kemungkinan terkena stroke maksimal ketika usia pasien sekitar 75-80 tahun

Catatan :
Plot biola mirip dengan plot kotak, dengan tambahan plot kepadatan kernel yang diputar di setiap sisinya. Plot biola mirip dengan plot kotak, hanya saja plot tersebut juga menunjukkan kepadatan probabilitas data pada nilai yang berbeda, biasanya dihaluskan oleh penduga kepadatan kernel. Biasanya plot biola akan mencakup semua data yang ada dalam plot kotak: penanda median data; sebuah kotak atau spidol yang menunjukkan rentang antarkuartil; dan mungkin seluruh titik sampel, jika jumlah sampelnya tidak terlalu banyak.
"""

plt.figure(figsize=(10,8))

sns.distplot(dataset[dataset['stroke'] == 0]["bmi"], color='green') # No Stroke - green
sns.distplot(dataset[dataset['stroke'] == 1]["bmi"], color='red') # Stroke - Red

plt.title('No Stroke vs Stroke by BMI', fontsize=15)
plt.xlim([10,100])
plt.show()

"""Berdasarkan data diatas hubungan antara bmi dan status penyakit stroke diperoleh jumlah bmi yang menderita stroke paling banyak dikisaran 20-30 dengan density 0,18, dibandingkan dengan junmlah bmi yang tidak menderita stroke dalam rentang 10-30 yang paling tinggi dengan density 0.07."""

plt.figure(figsize=(10,8))

sns.distplot(dataset[dataset['stroke'] == 0]["avg_glucose_level"], color='green') # No Stroke - green
sns.distplot(dataset[dataset['stroke'] == 1]["avg_glucose_level"], color='red') # Stroke - Red

plt.title('No Stroke vs Stroke by Avg. Glucose Level', fontsize=15)
plt.xlim([30,330])
plt.show()

"""Berdasarkan data diatas hubungan antara avg_glucose_level dengan status penyakit stroke diperoleh jumlah avg_glucose_level yang menderita stroke paling tinggi dalam rentang 50-100 dan 200-250, dibandingkan dengan jumlah avg_glucose_level yang tidak menderita stroke paling tinggi dalam rentang 50-100."""

plt.figure(figsize=(10,8))

sns.distplot(dataset[dataset['stroke'] == 0]["age"], color='green') # No Stroke - green
sns.distplot(dataset[dataset['stroke'] == 1]["age"], color='red') # Stroke - Red

plt.title('No Stroke vs Stroke by Age', fontsize=15)
plt.xlim([18,100])
plt.show()

"""Berdasarkan data diatas hubungan antara age dengan status penyakit stroke diperoleh rentang age yang menderita stroke dimulai dari umur 30-80, dan yang paling banyak terkena diumur 70-80, dibandingkan dengan rentang age yang tidak menderita stroke cukup landai dimulai dari umur 20.

# **Convert Categorical Data to Numeric**
"""

from sklearn.preprocessing import LabelEncoder

# Membuat objek LabelEncoder
label_encoder = LabelEncoder()

# Menggunakan LabelEncoder untuk mengubah kolom kategori menjadi numerik
dataset["gender"] = label_encoder.fit_transform(dataset['gender'])
dataset["ever_married"] = label_encoder.fit_transform(dataset['ever_married'])
dataset["smoking_status"] = label_encoder.fit_transform(dataset['smoking_status'])
# Menampilkan dataframe yang sudah diubah
print(dataset)

dataset['gender'].value_counts()

dataset['smoking_status'].value_counts()

"""# **Splitting the dataset into the Training set and Test set**"""

X = dataset.drop('stroke', axis = 1)
y = dataset['stroke']

X_train,X_test,y_train,y_test=train_test_split(X,y,random_state=0,test_size=0.3)

"""Untuk semua kumpulan data acak, masing-masing ditetapkan dengan nilai random_state. Artinya satu nilai random_state memiliki kumpulan data tetap. Artinya setiap kali kita menjalankan kode dengan nilai random_state 1, maka akan menghasilkan pemisahan dataset yang sama.

https://medium.com/mlearning-ai/what-the-heck-is-random-state-24a7a8389f3d

# **Feature Scaling**

Feature Scaling adalah suatu cara untuk membuat numerical data pada dataset memiliki rentang nilai (scale) yang sama.
"""

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

"""# **Handling Imbalance data using SMOTE**

SMOTE - Synthetic Minority Oversampling Technique is an oversampling technique where the synthetic samples are generated for the minority class. This algorithm helps to overcome the overfitting problem posed by random oversampling.

SMOTE - Teknik Pengambilan Sampel Minoritas Sintetis adalah teknik pengambilan sampel berlebih di mana sampel sintetik dihasilkan untuk kelas minoritas. Algoritme ini membantu mengatasi masalah overfitting yang ditimbulkan oleh random oversampling.
"""

print("Before OverSampling, counts of label '1': {}".format(sum(y_train==1)))
print("Before OverSampling, counts of label '0': {} \n".format(sum(y_train==0)))

# Create a SMOTE object
smote = SMOTE(random_state=42)

# Fit the SMOTE object to the training data and oversample the minority class
X_train_res, y_train_res = smote.fit_resample(X_train, y_train.ravel())

print('After OverSampling, the shape of train_X: {}'.format(X_train_res.shape))
print('After OverSampling, the shape of train_y: {} \n'.format(y_train_res.shape))

print("After OverSampling, counts of label '1': {}".format(sum(y_train_res==1)))
print("After OverSampling, counts of label '0': {}".format(sum(y_train_res==0)))

"""# **Fitting K-NN to the Training set**

n_neighbors -> Jumlah tetangga yang digunakan secara default untuk kueri tetangga.

p -> parameter

metric -> Metrik yang digunakan untuk perhitungan jarak.
"""

knn = KNeighborsClassifier(n_neighbors=2,p=2,metric='euclidean')

knn.fit(X_train_res, y_train_res)

"""# **Predicting the Test set results**"""

y_pred = knn.predict(X_test)

print("Data Prediksi : ",y_pred)
print("Data Unik Prediksi : ",np.unique(y_pred))

np.unique(y_pred)

"""# **Making the Confusion Matrix**

Confusion Matrix adalah tabel dengan 4 kombinasi berbeda dari nilai prediksi dan nilai aktual.
"""

CM=confusion_matrix(y_test,y_pred)
df_cm = pd.DataFrame(CM)
df_cm

"""# **Heatmap of Confusion matrix**"""

sns.heatmap(CM,
            annot=True,
            fmt='g')
plt.ylabel('Prediction',fontsize=13)
plt.xlabel('Actual',fontsize=13)
plt.title('Confusion Matrix',fontsize=17)
plt.show()

"""- Data aktual / asli (tidak stroke [0]) di prediksi (Stroke[1]) sebanyak 60 orang
- Data aktual / asli (tidak stroke [0]) di prediksi (tidak stroke [0]) sebanyak 1354 orang
- Data aktual / asli (stroke [1]) di prediksi (Stroke[1]) sebanyak 16 orang
- Data aktual / asli (stroke [1]) di prediksi (tidak stroke [0]) sebanyak 103 orang
"""

sns.heatmap(pd.DataFrame(CM), annot=True)

"""# **Model Accuracy**

Accuracy -> mennggambarkan seberapa akurat model dalam mengklasifikasikan dengan benar
"""

print(classification_report(y_test, y_pred))

corr=dataset.corr()
sns.heatmap(corr, annot=True)

#finding the relationship with the outcome
corr=dataset.corr()["stroke"].sort_values(ascending=False)

#dropping outcome feature
corr.drop("stroke", inplace=True)
corr

dataset

"""# **Example**"""

# Save Models.
from joblib import dump, load

# The model is saved.
dump(knn, "stroke_model.joblib")

# Load the model.
knn = load('stroke_model.joblib')

# Test the model.
y_pred = knn.predict(X_test)

# Load the model (if you haven't already)
knn = load('stroke_model.joblib')

# Define the new instance data with the 8 selected features
new_instance = {
    'age': 70,
    'avg_glucose_level': 400,
    'gender': 1,
    'hypertension': 1,
    'heart_disease': 1,
    'ever_married': 1,
    'bmi': 37,
    'smoking_status': 1,
}

# Convert the new instanc1e to a DataFrame
new_data = pd.DataFrame([new_instance])

# Apply the model to make a prediction
prediction = knn.predict_proba(new_data)[0][1] * 100

# Print the prediction
print(f"Probability of having a stroke: {prediction:.2f}%")

gender = 1
age = 70
hypertension = 1
heart_disease = 1
ever_married = 1
avg_glucose_level = 300
bmi = 32
smoking_status = 1

y_pred = knn.predict([[gender,age,hypertension,heart_disease,ever_married,avg_glucose_level,bmi,smoking_status]])
print(y_pred)

if y_pred == 1:
    print("Stroke")
else:
    print("Non Stroke")

gender = 1
age = 30
hypertension = 1
heart_disease = 1
ever_married = 1
avg_glucose_level = 160
bmi = 25
smoking_status = 1

y_pred = knn.predict([[gender,age,hypertension,heart_disease,ever_married,avg_glucose_level,bmi,smoking_status]])
print(y_pred)

if y_pred == 1:
    print("Stroke")
else:
    print("Non Stroke")

gender = 1
age = 43
hypertension = 1
heart_disease = 1
ever_married = 1
avg_glucose_level = 200
bmi = 21
smoking_status = 1

y_pred = knn.predict([[gender,age,hypertension,heart_disease,ever_married,avg_glucose_level,bmi,smoking_status]])
print(y_pred)

if y_pred == 1:
    print("Stroke")
else:
    print("Non Stroke")

gender = 1
age = 50
hypertension = 1
heart_disease = 1
ever_married = 1
avg_glucose_level = 250
bmi = 45
smoking_status = 1

y_pred = knn.predict([[gender,age,hypertension,heart_disease,ever_married,avg_glucose_level,bmi,smoking_status]])
print(y_pred)

if y_pred == 1:
    print("Stroke")
else:
    print("Non Stroke")

"""Berdasarkan hasil beberapa percobaan diatas dapat disimpulkan yang mempengaruhi pasien menderita stroke atau tidak menderita stroke yaitu faktor avg_glucose_level, bmi, dan age

- avg-glucose_level diatas 299 dan bmi diatas 31, dinyatakan pasien menderita stroke
- contoh :
  -avg-glucose_level : 300
  -bmi : 32
hasil : [1] Stroke

- age dibawah 30 dan avg-glucose_level diatas 150 dan bmi 20-25, dinyatakan pasien menderita stroke
- contoh :
  -age : 30
  -avg-glucose_level : 160
  -bmi : 25
hasil : [1] Stroke

- age diatas 42 dan avg-glucose_level dibawah 300 dan bmi dibawah 22, dinyatakan pasien tidak menderita stroke
- contoh :
  -age :43
  -avg-glucose_level : 200
  -bmi : 21
hasil : [0] Non stroke

- age dibawah 60 dan avg-glucose_level dibawah 300 dan bmi dibawah 50, dinyatakan pasien tidak menderita stroke
- contoh :
  -age : 50
  -avg-glucose_level : 250
  -bmi : 45
hasil : [0] Non stroke
"""